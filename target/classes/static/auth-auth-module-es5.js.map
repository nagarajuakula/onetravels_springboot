{"version":3,"sources":["webpack:///src/app/auth/auth-routing.module.ts","webpack:///src/app/auth/auth.module.ts","webpack:///src/app/auth/login/login.component.ts","webpack:///src/app/auth/login/login.component.html","webpack:///src/app/auth/signup/signup.component.ts","webpack:///src/app/auth/signup/signup.component.html"],"names":["routes","path","component","AuthRoutingModule","forChild","imports","exports","AuthModule","declarations","LoginComponent","router","aRoute","authService","tokenService","user","clearToken","errorMsg","username","loginForm","controls","value","password","login","subscribe","res","returnTo","snapshot","queryParams","navigate","err","JSON","parse","error","isLoggedIn","sessionStorage","clear","selector","templateUrl","styleUrls","SignupComponent","signUpForm","required","email","minLength","confirmPwd","confirmPwdValidator","signup","console","log","signUp","control"],"mappings":"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","file":"auth-auth-module-es5.js","sourcesContent":["import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\nimport { LoginComponent } from './login/login.component';\nimport { SignupComponent } from './signup/signup.component';\n\n\nconst routes: Routes = [\n  { path: 'login', component: LoginComponent},\n  { path: 'signup', component: SignupComponent}\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule]\n})\nexport class AuthRoutingModule { }\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { AuthRoutingModule } from './auth-routing.module';\nimport { LoginComponent } from './login/login.component';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { SignupComponent } from './signup/signup.component';\n\n\n@NgModule({\n  declarations: [\n    LoginComponent,\n\t  SignupComponent\n  ],\n  imports: [\n    CommonModule,\n    FormsModule,\n    ReactiveFormsModule,\n    AuthRoutingModule\n  ]\n})\nexport class AuthModule { }\n","import { Component, OnInit, ViewChild } from '@angular/core';\nimport { NgForm } from '@angular/forms';\nimport { Router, ActivatedRoute } from '@angular/router';\nimport { User } from '../../shared/models/user';\nimport { AuthService } from '../services/auth.service';\nimport { TokenStorageService } from 'src/app/auth/services/token-storage.service';\n\n@Component({\n  selector: 'app-login',\n  templateUrl: './login.component.html',\n  styleUrls: ['./login.component.css']\n})\nexport class LoginComponent implements OnInit {\n\n  @ViewChild(\"loginForm\") loginForm: NgForm;\n  errorMsg: string;\n  user: User = new User();\n\n  constructor(private router: Router,\n              private aRoute: ActivatedRoute,\n              private authService: AuthService,\n              private tokenService: TokenStorageService\n              ) { }\n\n  ngOnInit(): void {\n    this.tokenService.clearToken();\n    this.errorMsg = null;\n  }\n\n  login() {\n    this.user.username = this.loginForm.controls['username'].value;\n    this.user.password = this.loginForm.controls['password'].value;\n    this.authService.login(this.user).subscribe(res => {\n      const returnTo = this.aRoute.snapshot.queryParams['returnTo'];\n      this.router.navigate([returnTo || \"/\" ]);\n    },\n    err => {\n      this.errorMsg = JSON.parse(err.error)[\"error\"]\n    });\n  }\n\n  logout() {\n    this.authService.isLoggedIn = false;\n    sessionStorage.clear();\n    this.router.navigate([\"/login\"]);\n  }\n}\n","<div class=\"container mt--8 pb-5\">\n    <div class=\"row justify-content-center\">\n        <div class=\"col-lg-5 col-md-7\">\n            <!-- <div *ngIf=\"authService.loginMessage\">{{ authService.loginMessage }}</div> -->\n            <div class=\"card bg-secondary shadow border-0\">\n                <div class=\"card-body px-lg-5 py-lg-5\">\n                    <form #loginForm=\"ngForm\" (ngSubmit)=\"login()\" role=\"form\">\n                        <div class=\"form-group mb-3\">\n                            <div class=\"input-group input-group-alternative\">\n                                <label for=\"name\">User Name: </label>\n                                <input type=\"text\" name=\"username\" id=\"username\" class=\"form-control\" ngModel\n                                    #name=\"ngModel\" required>\n                            </div>\n                            <p style=\"color:red;\" *ngIf=\"name.touched && name.invalid\">Please Enter your\n                                name</p>\n                        </div>\n                        <div class=\"form-group\">\n                            <div class=\"input-group input-group-alternative\">\n                                <label for=\"password\">Password: </label>\n                                <input type=\"password\" name=\"password\" id=\"password\" class=\"form-control\" ngModel\n                                    #password=\"ngModel\" required>\n                            </div>\n                            <p style=\"color:red;\" *ngIf=\"password.touched && !password.valid\">\n                                <span *ngIf=\"password.errors.required\">Please Enter your Password</span>\n                                <span *ngIf=\"password.errors.minlength\">Your password should be minimum length of 6\n                                    characters</span>\n                            </p> \n                             <p>{{ loginForm.errors}}</p>\n                        </div>\n                        <div class=\"text-center\">\n                            <button class=\"btn btn-primary\" type=\"submit\">Login</button>\n                        </div>\n                    </form>\n                    <div class=\"row mt-3\">\n                        <div class=\"col-9\">\n                            Not a user?\n                        </div>\n                        <div class=\"col-3\">\n                            <a routerLink=\"/auth/signup\" class=\"text-light\"><small>SingUp</small></a>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </div>\n    </div>\n</div>","import { Component, OnInit } from '@angular/core';\nimport { NgForm, FormGroup, FormControl, Validators, AbstractControl } from '@angular/forms';\nimport { User } from 'src/app/shared/models/user';\n\nimport { AuthService } from '../services/auth.service';\n\n@Component({\n  selector: 'app-signup',\n  templateUrl: './signup.component.html',\n  styleUrls: ['./signup.component.css']\n})\nexport class SignupComponent implements OnInit {\n\n  signUpForm: FormGroup;\n  constructor(public authService: AuthService) { }\n\n  ngOnInit(): void {\n    this.signUpForm = new FormGroup({\n      username : new FormControl(\"\", [Validators.required]),\n      email : new FormControl(\"\", [Validators.required, Validators.email]),\n      password: new FormControl(\"\", [Validators.required, Validators.minLength(6)]),\n      confirmPwd: new FormControl(\"\", [Validators.required, confirmPwdValidator]),\n    })\n  }\n\n  signUp() {\n    // console.log(this.signUpForm);\n    const user = new User();\n    user.username = this.signUpForm.controls['username'].value;\n    user.password = this.signUpForm.controls['email'].value;\n    user.password = this.signUpForm.controls['password'].value;\n    this.authService.signup(user)\n      .subscribe(res => {\n        console.log(res);\n      });\n  }\n\n}\n\nexport function confirmPwdValidator(control: AbstractControl): {[key: string]: any} {\n     return \n     this.signUpForm.controls.password !== control.value ? { 'matchPassword': { value: control.value}}: null;\n}\n","<div class=\"container mt--8 pb-5\">\n    <div class=\"row justify-content-center\">\n        <div class=\"col-lg-5 col-md-7\">\n            <!-- <div *ngIf=\"authService.loginMessage\">{{ authService.loginMessage }}</div> -->\n            <div class=\"card bg-secondary shadow border-0\">\n                <div class=\"card-body px-lg-5 py-lg-5\">\n                    <form [formGroup]=\"signUpForm\" (ngSubmit)=\"signUp()\" role=\"form\">\n                        <div class=\"form-group mb-3\">\n                            <div class=\"input-group input-group-alternative\">\n                                <input type=\"text\" class=\"form-control\" id=\"username\" \n                                formControlName=\"username\" placeholder=\"User Name\"\n                                #username required>\n                            </div>\n                            <p style=\"color:red;\" *ngIf=\"username.touched && !username.valid\">\n                                <span *ngIf=\"username.errors.required\">Please Enter your Email</span>\n                            </p>\n                        </div>\n                        <div class=\"form-group mb-3\">\n                            <div class=\"input-group input-group-alternative\">\n                                <input type=\"text\" class=\"form-control\" id=\"email\" \n                                formControlName=\"email\" placeholder=\"Email\"\n                                #email required>\n                            </div>\n                            <p style=\"color:red;\" *ngIf=\"email.touched && !email.valid\">\n                                <span *ngIf=\"email.errors.required\">Please Enter your Email</span>\n                                <span *ngIf=\"email.errors.email\">Please Enter a valid Email</span>\n                            </p>\n                        </div>\n                        <div class=\"form-group\">\n                            <div class=\"input-group input-group-alternative\">\n                                <input type=\"password\" id=\"password\" class=\"form-control\"\n                                formControlName=\"password\"    \n                                placeholder=\"Password\"\n                                required minlength=\"6\"\n                                #password>\n                            </div>\n                            <p style=\"color:red;\" *ngIf=\"password.touched && !password.valid\">\n                                <span *ngIf=\"password.errors.required\">Please Enter your Password</span>\n                                <span *ngIf=\"password.errors.minlength\">Your password should be minimum length of 6\n                                    characters</span>\n                            </p>\n                        </div>\n                        <div class=\"form-group\">\n                            <div class=\"input-group input-group-alternative\">\n                                <input type=\"confirmPassword\" id=\"confirmPassword\" class=\"form-control\"\n                                    formControlName=\"confirmPwd\"\n                                     placeholder=\"Confirm Password\" \n                                    required \n                                    #confirmPwd\n                                    >\n                            </div>\n                            <p style=\"color:red;\" *ngIf=\"confirmPwd.touched && !confirmPwd.valid\">\n                                <span *ngIf=\"confirmPwd.errors.required\">Please Confirm your Password</span>\n                                <span *ngIf=\"confirmPwd.errors.pwdMatch\">Your password should be minimum length of 6\n                                    characters</span>\n                            </p>\n                            <!-- <p>{{ signUpForm.errors}}</p> -->\n                        </div>\n                        <div class=\"text-center\">\n                            <button class=\"btn btn-primary\" type=\"submit\" >Sign Up</button>\n                        </div>\n                    </form>\n                    <div class=\"row mt-3\">\n                        <div class=\"col-9\">\n                            Have already an account? \n                        </div>\n                        <div class=\"col-3\">\n                            <a routerLink=\"/auth/login\" class=\"text-light\"><small>Login</small></a>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </div>\n    </div>\n</div>"]}