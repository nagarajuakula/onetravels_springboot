{"version":3,"sources":["./src/app/auth/auth-routing.module.ts","./src/app/auth/auth.module.ts","./src/app/auth/login/login.component.ts","./src/app/auth/login/login.component.html","./src/app/auth/signup/signup.component.ts","./src/app/auth/signup/signup.component.html"],"names":[],"mappings":"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","file":"auth-auth-module-es2015.js","sourcesContent":["import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\nimport { LoginComponent } from './login/login.component';\nimport { SignupComponent } from './signup/signup.component';\n\n\nconst routes: Routes = [\n  { path: 'login', component: LoginComponent},\n  { path: 'signup', component: SignupComponent}\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule]\n})\nexport class AuthRoutingModule { }\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { AuthRoutingModule } from './auth-routing.module';\nimport { LoginComponent } from './login/login.component';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { SignupComponent } from './signup/signup.component';\n\n\n@NgModule({\n  declarations: [\n    LoginComponent,\n\t  SignupComponent\n  ],\n  imports: [\n    CommonModule,\n    FormsModule,\n    ReactiveFormsModule,\n    AuthRoutingModule\n  ]\n})\nexport class AuthModule { }\n","import { Component, OnInit, ViewChild } from '@angular/core';\nimport { NgForm } from '@angular/forms';\nimport { Router, ActivatedRoute } from '@angular/router';\nimport { User } from '../../shared/models/user';\nimport { AuthService } from '../services/auth.service';\nimport { TokenStorageService } from 'src/app/auth/services/token-storage.service';\n\n@Component({\n  selector: 'app-login',\n  templateUrl: './login.component.html',\n  styleUrls: ['./login.component.css']\n})\nexport class LoginComponent implements OnInit {\n\n  @ViewChild(\"loginForm\") loginForm: NgForm;\n  errorMsg: string;\n  user: User = new User();\n\n  constructor(private router: Router,\n              private aRoute: ActivatedRoute,\n              private authService: AuthService,\n              private tokenService: TokenStorageService\n              ) { }\n\n  ngOnInit(): void {\n    this.tokenService.clearToken();\n    this.errorMsg = null;\n  }\n\n  login() {\n    this.user.username = this.loginForm.controls['username'].value;\n    this.user.password = this.loginForm.controls['password'].value;\n    this.authService.login(this.user).subscribe(res => {\n      const returnTo = this.aRoute.snapshot.queryParams['returnTo'];\n      this.router.navigate([returnTo || \"/\" ]);\n    },\n    err => {\n      this.errorMsg = JSON.parse(err.error)[\"error\"]\n    });\n  }\n\n  logout() {\n    this.authService.isLoggedIn = false;\n    sessionStorage.clear();\n    this.router.navigate([\"/login\"]);\n  }\n}\n","<div class=\"container mt--8 pb-5\">\n    <div class=\"row justify-content-center\">\n        <div class=\"col-lg-5 col-md-7\">\n            <!-- <div *ngIf=\"authService.loginMessage\">{{ authService.loginMessage }}</div> -->\n            <div class=\"card bg-secondary shadow border-0\">\n                <div class=\"card-body px-lg-5 py-lg-5\">\n                    <form #loginForm=\"ngForm\" (ngSubmit)=\"login()\" role=\"form\">\n                        <div class=\"form-group mb-3\">\n                            <div class=\"input-group input-group-alternative\">\n                                <label for=\"name\">User Name: </label>\n                                <input type=\"text\" name=\"username\" id=\"username\" class=\"form-control\" ngModel\n                                    #name=\"ngModel\" required>\n                            </div>\n                            <p style=\"color:red;\" *ngIf=\"name.touched && name.invalid\">Please Enter your\n                                name</p>\n                        </div>\n                        <div class=\"form-group\">\n                            <div class=\"input-group input-group-alternative\">\n                                <label for=\"password\">Password: </label>\n                                <input type=\"password\" name=\"password\" id=\"password\" class=\"form-control\" ngModel\n                                    #password=\"ngModel\" required>\n                            </div>\n                            <p style=\"color:red;\" *ngIf=\"password.touched && !password.valid\">\n                                <span *ngIf=\"password.errors.required\">Please Enter your Password</span>\n                                <span *ngIf=\"password.errors.minlength\">Your password should be minimum length of 6\n                                    characters</span>\n                            </p> \n                             <p>{{ loginForm.errors}}</p>\n                        </div>\n                        <div class=\"text-center\">\n                            <button class=\"btn btn-primary\" type=\"submit\">Login</button>\n                        </div>\n                    </form>\n                    <div class=\"row mt-3\">\n                        <div class=\"col-9\">\n                            Not a user?\n                        </div>\n                        <div class=\"col-3\">\n                            <a routerLink=\"/auth/signup\" class=\"text-light\"><small>SingUp</small></a>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </div>\n    </div>\n</div>","import { Component, OnInit } from '@angular/core';\nimport { NgForm, FormGroup, FormControl, Validators, AbstractControl } from '@angular/forms';\nimport { User } from 'src/app/shared/models/user';\n\nimport { AuthService } from '../services/auth.service';\n\n@Component({\n  selector: 'app-signup',\n  templateUrl: './signup.component.html',\n  styleUrls: ['./signup.component.css']\n})\nexport class SignupComponent implements OnInit {\n\n  signUpForm: FormGroup;\n  constructor(public authService: AuthService) { }\n\n  ngOnInit(): void {\n    this.signUpForm = new FormGroup({\n      username : new FormControl(\"\", [Validators.required]),\n      email : new FormControl(\"\", [Validators.required, Validators.email]),\n      password: new FormControl(\"\", [Validators.required, Validators.minLength(6)]),\n      confirmPwd: new FormControl(\"\", [Validators.required, confirmPwdValidator]),\n    })\n  }\n\n  signUp() {\n    // console.log(this.signUpForm);\n    const user = new User();\n    user.username = this.signUpForm.controls['username'].value;\n    user.password = this.signUpForm.controls['email'].value;\n    user.password = this.signUpForm.controls['password'].value;\n    this.authService.signup(user)\n      .subscribe(res => {\n        console.log(res);\n      });\n  }\n\n}\n\nexport function confirmPwdValidator(control: AbstractControl): {[key: string]: any} {\n     return \n     this.signUpForm.controls.password !== control.value ? { 'matchPassword': { value: control.value}}: null;\n}\n","<div class=\"container mt--8 pb-5\">\n    <div class=\"row justify-content-center\">\n        <div class=\"col-lg-5 col-md-7\">\n            <!-- <div *ngIf=\"authService.loginMessage\">{{ authService.loginMessage }}</div> -->\n            <div class=\"card bg-secondary shadow border-0\">\n                <div class=\"card-body px-lg-5 py-lg-5\">\n                    <form [formGroup]=\"signUpForm\" (ngSubmit)=\"signUp()\" role=\"form\">\n                        <div class=\"form-group mb-3\">\n                            <div class=\"input-group input-group-alternative\">\n                                <input type=\"text\" class=\"form-control\" id=\"username\" \n                                formControlName=\"username\" placeholder=\"User Name\"\n                                #username required>\n                            </div>\n                            <p style=\"color:red;\" *ngIf=\"username.touched && !username.valid\">\n                                <span *ngIf=\"username.errors.required\">Please Enter your Email</span>\n                            </p>\n                        </div>\n                        <div class=\"form-group mb-3\">\n                            <div class=\"input-group input-group-alternative\">\n                                <input type=\"text\" class=\"form-control\" id=\"email\" \n                                formControlName=\"email\" placeholder=\"Email\"\n                                #email required>\n                            </div>\n                            <p style=\"color:red;\" *ngIf=\"email.touched && !email.valid\">\n                                <span *ngIf=\"email.errors.required\">Please Enter your Email</span>\n                                <span *ngIf=\"email.errors.email\">Please Enter a valid Email</span>\n                            </p>\n                        </div>\n                        <div class=\"form-group\">\n                            <div class=\"input-group input-group-alternative\">\n                                <input type=\"password\" id=\"password\" class=\"form-control\"\n                                formControlName=\"password\"    \n                                placeholder=\"Password\"\n                                required minlength=\"6\"\n                                #password>\n                            </div>\n                            <p style=\"color:red;\" *ngIf=\"password.touched && !password.valid\">\n                                <span *ngIf=\"password.errors.required\">Please Enter your Password</span>\n                                <span *ngIf=\"password.errors.minlength\">Your password should be minimum length of 6\n                                    characters</span>\n                            </p>\n                        </div>\n                        <div class=\"form-group\">\n                            <div class=\"input-group input-group-alternative\">\n                                <input type=\"confirmPassword\" id=\"confirmPassword\" class=\"form-control\"\n                                    formControlName=\"confirmPwd\"\n                                     placeholder=\"Confirm Password\" \n                                    required \n                                    #confirmPwd\n                                    >\n                            </div>\n                            <p style=\"color:red;\" *ngIf=\"confirmPwd.touched && !confirmPwd.valid\">\n                                <span *ngIf=\"confirmPwd.errors.required\">Please Confirm your Password</span>\n                                <span *ngIf=\"confirmPwd.errors.pwdMatch\">Your password should be minimum length of 6\n                                    characters</span>\n                            </p>\n                            <!-- <p>{{ signUpForm.errors}}</p> -->\n                        </div>\n                        <div class=\"text-center\">\n                            <button class=\"btn btn-primary\" type=\"submit\" >Sign Up</button>\n                        </div>\n                    </form>\n                    <div class=\"row mt-3\">\n                        <div class=\"col-9\">\n                            Have already an account? \n                        </div>\n                        <div class=\"col-3\">\n                            <a routerLink=\"/auth/login\" class=\"text-light\"><small>Login</small></a>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </div>\n    </div>\n</div>"],"sourceRoot":"webpack:///"}