{"version":3,"sources":["webpack:///src/app/auth/services/auth-guard.service.ts","webpack:///src/app/products/product-details/product-details.component.ts","webpack:///src/app/products/product-details/product-details.component.html","webpack:///src/app/products/product/product.component.ts","webpack:///src/app/products/product/product.component.html","webpack:///src/app/products/products-routing.module.ts","webpack:///src/app/products/products.module.ts","webpack:///src/app/products/products/products.component.ts","webpack:///src/app/products/products/products.component.html","webpack:///src/app/products/services/productResolver.service.ts"],"names":["AuthGuardService","authService","router","route","state","isLoggedIn","navigate","queryParams","returnTo","url","providedIn","ProductDetailsComponent","aroute","productsService","cartService","snackBarService","isFromCart","selectedProductId","snapshot","params","product","getProduct","productId","addToCart","show","id","relativeTo","deleteProduct","items","push","checkout","selector","templateUrl","ProductComponent","aRoute","productService","editMode","name","description","category","author","price","productForm","required","updateProduct","value","addProduct","addOrEditProduct","styleUrls","productRoutes","path","component","canActivate","resolve","ProductsRoutingModule","forChild","imports","exports","ProductsModule","declarations","providers","ProductsComponent","products","messageTitle","messageDescription","goToMessage","goToLink","selectedCategory","getProducts","subscribe","ProductResolver","sessionStorage","removeItem","length","pipe","data"],"mappings":";;;;;;;;;;;;;;;;;;;AAEA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;QAKaA,gB;AAET,gCAAoBC,WAApB,EACoBC,MADpB,EACoC;AAAA;;AADhB,aAAAD,WAAA,GAAAA,WAAA;AACA,aAAAC,MAAA,GAAAA,MAAA;AAAmB;;;;oCAE3BC,K,EAA+BC,K,EAA0B;AAEjE,cAAI,CAAC,KAAKH,WAAL,CAAiBI,UAAtB,EAAkC;AAC9B,mBAAO,KAAKH,MAAL,CAAYI,QAAZ,CAAqB,CAAC,aAAD,CAArB,EAAsC;AACzCC,yBAAW,EAAE;AACTC,wBAAQ,EAAEJ,KAAK,CAACK;AADP;AAD4B,aAAtC,CAAP;AAKH;;AACD,iBAAO,IAAP;AACH;;;;;;;uBAfQT,gB,EAAgB,iH,EAAA,8G;AAAA,K;;;aAAhBA,gB;AAAgB,eAAhBA,gBAAgB,K;AAAA,kBAFb;;;;;sEAEHA,gB,EAAgB;cAH5B,wDAG4B;eAHjB;AACRU,oBAAU,EAAE;AADJ,S;AAGiB,Q;;;;;;;;;;;;;;;;;;;;;;;;ACP7B;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;;;;;ACkCY;;AACA;AAAA;;AAAA;;AAAA;AAAA;;AAA2D;;AAAW;;;;;;;;AAGtE;;AACI;AAAA;;AAAA;;AAAA;AAAA;;AAAoD;;AAAI;;;;;;;;AACxD;;AACA;AAAA;;AAAA;;AAAA;AAAA;;AAAuD;;AAAM;;;;QD3BhEC,uB;AAOT,uCAAoBT,MAApB,EACYU,MADZ,EAEYX,WAFZ,EAGYY,eAHZ,EAIYC,WAJZ,EAKYC,eALZ,EAK8C;AAAA;;AAL1B,aAAAb,MAAA,GAAAA,MAAA;AACR,aAAAU,MAAA,GAAAA,MAAA;AACA,aAAAX,WAAA,GAAAA,WAAA;AACA,aAAAY,eAAA,GAAAA,eAAA;AACA,aAAAC,WAAA,GAAAA,WAAA;AACA,aAAAC,eAAA,GAAAA,eAAA;AATZ,aAAAC,UAAA,GAAa,KAAb;AACA,aAAAX,UAAA,GAAa,KAAb;AAQiD;;;;mCAEtC;AACP,eAAKY,iBAAL,GAAyB,CAAC,KAAKL,MAAL,CAAYM,QAAZ,CAAqBC,MAArB,CAA4B,IAA5B,CAA1B;AACA,eAAKP,MAAL,CAAYM,QAAZ,CAAqBX,WAArB,CAAiC,UAAjC,IAA+C,KAAKS,UAAL,GAAkB,IAAjE,GAAwE,KAAKA,UAAL,GAAkB,KAA1F;AACA,eAAKI,OAAL,GAAe,KAAKP,eAAL,CAAqBQ,UAArB,CAAgC,KAAKJ,iBAArC,CAAf;AACA,eAAKZ,UAAL,GAAkB,KAAKJ,WAAL,CAAiBI,UAAnC;AACH;;;yCAEgBiB,S,EAAmB;AAChC,eAAKR,WAAL,CAAiBS,SAAjB,CAA2BD,SAA3B;AACA,eAAKP,eAAL,CAAqBS,IAArB,CAA0B,2BAA1B;AACH;;;sCAEa;AACV,eAAKtB,MAAL,CAAYI,QAAZ,CAAqB,CAAC,iBAAD,EAAoB,KAAKc,OAAL,CAAaK,EAAjC,CAArB,EAA2D;AAAEC,sBAAU,EAAE,KAAKd;AAAnB,WAA3D;AACH;;;wCAEe;AACZ,eAAKC,eAAL,CAAqBc,aAArB,CAAmC,KAAKP,OAAL,CAAaK,EAAhD;AACA,eAAKV,eAAL,CAAqBS,IAArB,CAA0B,8BAA1B;AACH;;;mCAEU;AACP,eAAKV,WAAL,CAAiBc,KAAjB,CAAuBC,IAAvB,CAA4B,KAAKZ,iBAAjC;AACA,eAAKf,MAAL,CAAYI,QAAZ,CAAqB,CAAC,oBAAD,CAArB,EAA6C;AAAEoB,sBAAU,EAAE,KAAKd;AAAnB,WAA7C;AACH;;;;;;;uBAtCQD,uB,EAAuB,uH,EAAA,+H,EAAA,+I,EAAA,2I,EAAA,+I,EAAA,kJ;AAAA,K;;;YAAvBA,uB;AAAuB,0C;AAAA,e;AAAA,a;AAAA,ivB;AAAA;AAAA;ACdpC;;AACI;;AACI;;AACI;;AAEJ;;AACA;;AACI;;AACI;;AACI;;AAAuB;;AAAe;;AACtC;;AACI;;AACI;;AACI;;AAAgB;;AAAI;;AACpB;;AAAI;;AAAkB;;AAC1B;;AAKA;;AACI;;AAAgB;;AAAW;;AAC3B;;AAAI;;AAAyB;;AACjC;;AACA;;AACI;;AAAgB;;AAAK;;AACrB;;AAAI;;AAAqB;;AAC7B;;AACJ;;AACJ;;AACJ;;AACJ;;AACJ;;AACA;;AACI;;AAEA;;AACI;AAAA,mBAAS,IAAAmB,QAAA,EAAT;AAAmB,WAAnB;;AAAqB;;AAAQ;;AAAS;;AAC1C;;AAEI;;AAER;;AACJ;;AACJ;;;;AA9BoC;;AAAA;;AAQA;;AAAA;;AAIA;;AAAA;;AASe;;AAAA;;AAIX;;AAAA;;AAEG;;AAAA;;;;;;;;;sED3B9BnB,uB,EAAuB;cALnC,uDAKmC;eALzB;AACPoB,kBAAQ,EAAE,qBADH;AAEPC,qBAAW,EAAE;AAFN,S;AAKyB,Q;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AEdpC;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;;;ACoBoB;;AAAgF;;AAAc;;;;;;AAAnC;;AAAqB;;AAAA;;;;;;AAGxF;;AACI;;AAAoB;;AAAM;;AAAQ;;AAClC;;AAEJ;;;;QDfCC,gB;AAMX,gCAAoB/B,MAApB,EACoBgC,MADpB,EAEmBC,cAFnB,EAEoD;AAAA;;AAFhC,aAAAjC,MAAA,GAAAA,MAAA;AACA,aAAAgC,MAAA,GAAAA,MAAA;AACD,aAAAC,cAAA,GAAAA,cAAA;AAJnB,aAAAC,QAAA,GAAW,KAAX;AAIuD;;;;mCAE/C;AACN,cAAId,SAAS,GAAG,CAAC,KAAKY,MAAL,CAAYhB,QAAZ,CAAqBC,MAArB,CAA4B,IAA5B,CAAjB;;AACA,cAAGG,SAAH,EAAc;AACZ,iBAAKc,QAAL,GAAgB,IAAhB;AACA,iBAAKhB,OAAL,GAAe,KAAKe,cAAL,CAAoBd,UAApB,CAA+BC,SAA/B,CAAf;AACD,WAHD,MAGO;AACL,iBAAKF,OAAL,GAAe;AAAEK,gBAAE,EAAE,CAAN;AAASY,kBAAI,EAAE,IAAf;AAAqBC,yBAAW,EAAE,IAAlC;AAAwCC,sBAAQ,EAAE,IAAlD;AAAwDC,oBAAM,EAAE,IAAhE;AAAsEC,mBAAK,EAAE;AAA7E,aAAf;AACD;;AAED,eAAKC,WAAL,GAAmB,IAAI,wDAAJ,CAAc;AAC/BjB,cAAE,EAAE,IAAI,0DAAJ,CAAgB,KAAKL,OAAL,CAAaK,EAA7B,CAD2B;AAE/BY,gBAAI,EAAE,IAAI,0DAAJ,CAAgB,KAAKjB,OAAL,CAAaiB,IAA7B,EAAmC,CAAC,0DAAWM,QAAZ,CAAnC,CAFyB;AAG/BL,uBAAW,EAAE,IAAI,0DAAJ,CAAgB,KAAKlB,OAAL,CAAakB,WAA7B,EAA0C,CAAC,0DAAWK,QAAZ,CAA1C,CAHkB;AAI/BJ,oBAAQ,EAAE,IAAI,0DAAJ,CAAgB,KAAKnB,OAAL,CAAamB,QAA7B,EAAuC,CAAC,0DAAWI,QAAZ,CAAvC,CAJqB;AAK/BH,kBAAM,EAAE,IAAI,0DAAJ,CAAgB,KAAKpB,OAAL,CAAaoB,MAA7B,CALuB;AAM/BC,iBAAK,EAAE,IAAI,0DAAJ,CAAgB,KAAKrB,OAAL,CAAaqB,KAA7B;AANwB,WAAd,CAAnB;AAQD;;;2CAEkB;AACjB,cAAG,KAAKL,QAAR,EAAkB;AAChB,iBAAKD,cAAL,CAAoBS,aAApB,CAAkC,KAAKF,WAAL,CAAiBG,KAAnD;AACD,WAFD,MAEO;AACL,iBAAKV,cAAL,CAAoBW,UAApB,CAA+B,KAAKJ,WAAL,CAAiBG,KAAhD;AACD;;AACD,eAAK3C,MAAL,CAAYI,QAAZ,CAAqB,CAAC,GAAD,CAArB,EAA4B;AAAEoB,sBAAU,EAAE,KAAKQ;AAAnB,WAA5B;AACD;;;;;;;uBApCUD,gB,EAAgB,uH,EAAA,+H,EAAA,2I;AAAA,K;;;YAAhBA,gB;AAAgB,kC;AAAA,e;AAAA,a;AAAA,g3B;AAAA;AAAA;ACZzB;;AACI;;AAAK;;AAA0C;;AAC/C;;AAAgC;AAAA,mBAAY,IAAAc,gBAAA,EAAZ;AAA8B,WAA9B;;AAC5B;;AACI;;AAAkB;;AAAI;;AAAQ;;AAC9B;;AAGJ;;AACA;;AACI;;AAAyB;;AAAW;;AAAQ;;AAC5C;;AAGJ;;AACA;;AACI;;AAAsB;;AAAQ;;AAAQ;;AACtC;;AAGI;;AACJ;;AACJ;;AACA;;AAKA;;AACI;;AAAmB;;AAAK;;AAAQ;;AAChC;;AAEJ;;AACA;;AACI;;AAA+C;;AAAiC;;AACpF;;AACJ;;AACJ;;;;AApCS;;AAAA;;AACC;;AAAA;;AAkBc;;AAAA;;AAGQ;;AAAA;;AAW2B;;AAAA;;;;;;;;;sEDtBlDd,gB,EAAgB;cAL5B,uDAK4B;eALlB;AACTF,kBAAQ,EAAE,aADD;AAETC,qBAAW,EAAE,0BAFJ;AAGTgB,mBAAS,EAAE,CAAC,yBAAD;AAHF,S;AAKkB,Q;;;;;;;;;;;;;;;;;;;;;;;;;;AEZ7B;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;AASA,QAAMC,aAAa,GAAW,CAC1B;AAAEC,UAAI,EAAE,EAAR;AAAYC,eAAS,EAAE;AAAvB,KAD0B,EAE1B;AACID,UAAI,EAAE,kBADV;AAEIC,eAAS,EAAE,2EAFf;AAGIC,iBAAW,EAAE,CAAC,kFAAD;AAHjB,KAF0B,EAO1B;AACIF,UAAI,EAAE,kBADV;AAEIC,eAAS,EAAE,2EAFf;AAGIC,iBAAW,EAAE,CAAC,kFAAD,CAHjB;AAIIC,aAAO,EAAE;AAAEjC,eAAO,EAAE;AAAX;AAJb,KAP0B,EAa1B;AACI8B,UAAI,EAAE,KADV;AAEIC,eAAS,EAAE,kGAFf;AAGIE,aAAO,EAAE;AAAEjC,eAAO,EAAE;AAAX;AAHb,KAb0B,CAA9B;;QAyBakC,qB;;;;;YAAAA;;;;yBAAAA,qB;AAAqB,O;AAAA,gBALrB,CACL,6DAAaC,QAAb,CAAsBN,aAAtB,CADK,CAKqB,EAFpB,4DAEoB;;;;0HAArBK,qB,EAAqB;AAAA;AAAA,kBAFpB,4DAEoB;AAAA,O;AAFR,K;;;;;sEAEbA,qB,EAAqB;cANjC,sDAMiC;eANxB;AACNE,iBAAO,EAAE,CACL,6DAAaD,QAAb,CAAsBN,aAAtB,CADK,CADH;AAINQ,iBAAO,EAAE,CAAC,4DAAD;AAJH,S;AAMwB,Q;;;;;;;;;;;;;;;;;;AClClC;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;QA6BaC,c;;;;;YAAAA;;;;yBAAAA,c;AAAc,O;AAAA,iBAFd,E;AAAI,gBATN,CACP,4DADO,EAEP,8EAFO,EAGP,0DAHO,EAIP,kEAJO,EAKP,oEALO,EAMP,wEANO,EAOP,kEAPO,CASM;;;;0HAEJA,c,EAAc;AAAA,uBAfvB,8EAeuB,EAdvB,kGAcuB,EAbvB,2EAauB;AAbP,kBAGhB,4DAHgB,EAIhB,8EAJgB,EAKhB,0DALgB,EAMhB,kEANgB,EAOhB,oEAPgB,EAQhB,wEARgB,EAShB,kEATgB;AAaO,O;AAJX,K;;;;;sEAIHA,c,EAAc;cAjB1B,sDAiB0B;eAjBjB;AACRC,sBAAY,EAAE,CACZ,8EADY,EAEZ,kGAFY,EAGZ,2EAHY,CADN;AAMRH,iBAAO,EAAE,CACP,4DADO,EAEP,8EAFO,EAGP,0DAHO,EAIP,kEAJO,EAKP,oEALO,EAMP,wEANO,EAOP,kEAPO,CAND;AAeRI,mBAAS,EAAE;AAfH,S;AAiBiB,Q;;;;;;;;;;;;;;;;;;AC7B3B;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;;;ACOQ;;AAAmF;;AACnF;;;;;;AADgE;;AAAmB;;AAAA;;;;;;;;AAwB/E;;AACM;;AACI;AAAA;;AAAA;;AAAA;;AAAA;AAAA;;AAAoC;;AAA2B;;AACvE;;;;;;;;AApBR;;AAGE;;AACE;;AAEE;AAAA;;AAAA;;AAAA;;AAAA;AAAA;;AAFF;;AAGA;;AAAkB;AAAA;;AAAA;;AAAA;;AAAA;AAAA;;AAChB;;AAAuB;;AAAkB;;AAC3C;;AACA;;AACE;;AAA0B;;AAAqB;;AAAQ;;AACvD;;AACE;;AAA4D;AAAA;;AAAA;;AAAA;;AAAA;AAAA;;AAC1D;;AACF;;AACF;;AAAO;;AACP;;AAIF;;AACF;;AAqBF;;;;;;;;AAtC2B;;AAAA;;AAGE;;AAAA;;AAGG;;AAAA;;AAMN;;AAAA;;;;;;AA4B1B;;;;;;AACE,+FAAsB,aAAtB,EAAsB,yBAAtB,EAAsB,UAAtB,EAAsB,eAAtB,EAAsB,aAAtB,EAAsB,kBAAtB;;;;;;AA/CJ;;AACE;;;;;;AA6CA;;;;;;AAOF;;;;;;AAnDI;;AAAA;;AAiDA;;AAAA;;;;;;AAIF;;AACE;;AACI;;AACE;;AAAsB;;AAAU;;AAClC;;AACF;;AACN;;;;QD5DSC,iB;AASX,iCAAoB3D,MAApB,EACoBgC,MADpB,EAEmBrB,eAFnB,EAGoBC,WAHpB,EAImBb,WAJnB,EAKoBc,eALpB,EAKsD;AAAA;;AALlC,aAAAb,MAAA,GAAAA,MAAA;AACA,aAAAgC,MAAA,GAAAA,MAAA;AACD,aAAArB,eAAA,GAAAA,eAAA;AACC,aAAAC,WAAA,GAAAA,WAAA;AACD,aAAAb,WAAA,GAAAA,WAAA;AACC,aAAAc,eAAA,GAAAA,eAAA;AAZpB,aAAA+C,QAAA,GAAsB,EAAtB;AAEA,aAAAC,YAAA,GAAe,oCAAf;AACA,aAAAC,kBAAA,GAAqB,EAArB;AACA,aAAAC,WAAA,GAAc,aAAd;AACA,aAAAC,QAAA,GAAW,4BAAX;AAOyD;;;;mCAEjD;AAAA;;AACN,eAAKC,gBAAL,GAAwB,KAAxB;AACE,eAAKtD,eAAL,CAAqBuD,WAArB,GAAmCC,SAAnC,CAA6C,UAAAP,QAAQ,EAAI;AACvD,iBAAI,CAACA,QAAL,GAAgBA,QAAhB;AACH,WAFC;AAGH;;;oCAEWxC,S,EAAmB;AAC7B,eAAKpB,MAAL,CAAYI,QAAZ,CAAqB,CAAC,iBAAiBgB,SAAlB,CAArB,EAAmD;AAAEI,sBAAU,EAAE,KAAKQ;AAAnB,WAAnD;AACD;;;yCAEgBZ,S,EAAmB;AAClC,eAAKR,WAAL,CAAiBS,SAAjB,CAA2BD,SAA3B;AACA,eAAKP,eAAL,CAAqBS,IAArB,CAA0B,uBAA1B;AACD;;;sCAEaF,S,EAAmB;AAC/B,eAAKT,eAAL,CAAqBc,aAArB,CAAmCL,SAAnC;AACA,eAAKP,eAAL,CAAqBS,IAArB,CAA0B,8BAA1B;AACH;;;;;;;uBAnCYqC,iB,EAAiB,uH,EAAA,+H,EAAA,2I,EAAA,wI,EAAA,+I,EAAA,kJ;AAAA,K;;;YAAjBA,iB;AAAiB,mC;AAAA,e;AAAA,a;AAAA,uwC;AAAA;AAAA;ACd9B;;AACE;;AACE;;AACE;;AAA0B;;AAAY;;AACtC;;AACE;AAAA;AAAA;;AACA;;AAAiC;;AAAG;;AACpC;;AAEF;;AACF;;AACF;;AACA;;AACE;;AAsDA;;AASF;;AACF;;;;;;AAxEQ;;AAAA;;AAEY;;AAAA;;AAM0B;;AAAA,2GAAmD,UAAnD,EAAmD,GAAnD;;;;;;;;;;sEDCjCA,iB,EAAiB;cAL7B,uDAK6B;eALnB;AACT9B,kBAAQ,EAAE,cADD;AAETC,qBAAW,EAAE,2BAFJ;AAGTgB,mBAAS,EAAE,CAAC,0BAAD;AAHF,S;AAKmB,Q;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AEd9B;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;QAeasB,e;AAET,+BAAoBnC,cAApB,EACoBlC,WADpB,EAC8C;AAAA;;AAD1B,aAAAkC,cAAA,GAAAA,cAAA;AACA,aAAAlC,WAAA,GAAAA,WAAA;AAA4B;;;;gCAExCE,K,EAA+BC,K,EAA0B;AAC7D;AACA,cAAG,CAAC,KAAKH,WAAL,CAAiBI,UAArB,EAAiC;AAC7BkE,0BAAc,CAACC,UAAf,CAA0B,iEAA1B;AACH;;AACD,cAAG,KAAKrC,cAAL,CAAoB2B,QAApB,CAA6BW,MAA7B,KAAwC,CAA3C,EAA8C;AAC1C,mBAAO,KAAKtC,cAAL,CAAoB2B,QAA3B;AACH;;AACD,iBAAO,KAAK3B,cAAL,CAAoBiC,WAApB,GACNM,IADM,CACD,2DAAI,UAAAC,IAAI,EAAI;AACd,mBAAOA,IAAP;AACH,WAFK,CADC,CAAP;AAIH;;;;;;;uBAjBQL,e,EAAe,yH,EAAA,sI;AAAA,K;;;aAAfA,e;AAAe,eAAfA,eAAe,K;AAAA,kBAFZ;;;;;sEAEHA,e,EAAe;cAH3B,wDAG2B;eAHhB;AACR5D,oBAAU,EAAE;AADJ,S;AAGgB,Q","file":"products-products-module-es5.js","sourcesContent":["import { CanActivate, ActivatedRouteSnapshot, RouterStateSnapshot, Router } from '@angular/router';\r\nimport { AuthService } from './auth.service';\r\nimport { Injectable } from '@angular/core';\r\n\r\n@Injectable({\r\n    providedIn: 'root'\r\n})\r\nexport class AuthGuardService implements CanActivate {\r\n\r\n    constructor(private authService: AuthService,\r\n                private router: Router) { }\r\n\r\n    canActivate(route: ActivatedRouteSnapshot, state: RouterStateSnapshot): boolean | import(\"@angular/router\").UrlTree | import(\"rxjs\").Observable<boolean | import(\"@angular/router\").UrlTree> | Promise<boolean | import(\"@angular/router\").UrlTree> {\r\n\r\n        if (!this.authService.isLoggedIn) {\r\n            return this.router.navigate([\"/auth/login\"], {\r\n                queryParams: {\r\n                    returnTo: state.url\r\n                }\r\n            });\r\n        }\r\n        return true;\r\n    }\r\n\r\n}","import { Component, OnInit } from '@angular/core';\r\nimport { Router, ActivatedRoute } from '@angular/router';\r\n\r\nimport { ProductsService } from '../services/products.service';\r\nimport { Product } from 'src/app/shared/models/product';\r\nimport { CartService } from 'src/app/cart/services/cart.service';\r\nimport { AuthService } from 'src/app/auth/services/auth.service';\r\nimport { SnackBarService } from 'src/app/services/snackbar.service';\r\n\r\n@Component({\r\n    selector: 'app-product-details',\r\n    templateUrl: './product-details.component.html'\r\n}\r\n)\r\nexport class ProductDetailsComponent implements OnInit {\r\n\r\n    selectedProductId: number;\r\n    isFromCart = false;\r\n    isLoggedIn = false;\r\n    product: Product;\r\n\r\n    constructor(private router: Router,\r\n        private aroute: ActivatedRoute,\r\n        private authService: AuthService,\r\n        private productsService: ProductsService,\r\n        private cartService: CartService,\r\n        private snackBarService: SnackBarService) { }\r\n\r\n    ngOnInit() {\r\n        this.selectedProductId = +this.aroute.snapshot.params['id'];\r\n        this.aroute.snapshot.queryParams['fromCart'] ? this.isFromCart = true : this.isFromCart = false;\r\n        this.product = this.productsService.getProduct(this.selectedProductId);\r\n        this.isLoggedIn = this.authService.isLoggedIn;\r\n    }\r\n\r\n    addProductToCart(productId: number) {\r\n        this.cartService.addToCart(productId);\r\n        this.snackBarService.show(\"Product added to the cart\");\r\n    }\r\n\r\n    editProduct() {\r\n        this.router.navigate([\"../edit-product\", this.product.id], { relativeTo: this.aroute });\r\n    }\r\n\r\n    deleteProduct() {\r\n        this.productsService.deleteProduct(this.product.id);\r\n        this.snackBarService.show(\"Product deleted successfully\");\r\n    }\r\n\r\n    checkout() {\r\n        this.cartService.items.push(this.selectedProductId);\r\n        this.router.navigate([\"/checkout/checkout\"], { relativeTo: this.aroute});\r\n    }\r\n}","<div class=\"container\">\r\n    <div class=\"row\">\r\n        <div class=\"col-sm-4\">\r\n            <img src=\"../../../assets/images/female.png\" class=\"card-img-top\" width=\"200px\" height=\"200px\"\r\n                    alt=\"...\">\r\n        </div>\r\n        <div class=\"col-sm-6\">\r\n            <div class=\"card\">\r\n                <div class=\"card-body\">\r\n                    <h5 class=\"card-title\">Product Details</h5>\r\n                    <table class=\"table\" cellspacing=\"0\" style=\"max-height: 28px;\">\r\n                        <tbody>\r\n                            <tr>\r\n                                <th scope=\"row\">Name</th>\r\n                                <td>{{ product.name }}</td>\r\n                            </tr>\r\n                            <!-- <tr *ngIf=\"product.category === 'Books'\">\r\n                                <th scope=\"row\">Author</th>\r\n                                <td>{{ product.author }}</td>\r\n                            </tr> -->\r\n                            <tr>\r\n                                <th scope=\"row\">Description</th>\r\n                                <td>{{ product.description }}</td>\r\n                            </tr>\r\n                            <tr>\r\n                                <th scope=\"row\">Price</th>\r\n                                <td>₹ {{ product.price }}</td>\r\n                            </tr>\r\n                        </tbody>\r\n                    </table>\r\n                </div>\r\n            </div>\r\n        </div>\r\n        <div class=\"col-sm-2\">\r\n            <button class=\"btn btn-primary\" style=\"width: 110px;\" \r\n            (click)=\"addProductToCart(product.id)\" *ngIf=\"!isFromCart\">Add to Cart</button>\r\n            <button class=\"btn btn-danger\" style=\"width: 110px;\"\r\n                (click)=\"checkout()\">Checkout</button>&nbsp;\r\n            <button class=\"btn btn-success\" style=\"width: 110px;\"\r\n                (click)=\"editProduct()\" *ngIf=\"isLoggedIn === true\">Edit</button>\r\n                <button class=\"btn btn-danger\" style=\"width: 110px;\"\r\n                (click)=\"deleteProduct()\"  *ngIf=\"isLoggedIn === true\">Delete</button>\r\n        </div>\r\n    </div>\r\n</div>","import { Component, OnInit } from '@angular/core';\nimport { FormGroup, FormControl, Validators } from '@angular/forms';\nimport { ActivatedRoute, Router } from '@angular/router';\n\nimport { Product } from 'src/app/shared/models/product';\nimport { ProductsService } from '../services/products.service';\n\n@Component({\n  selector: 'app-product',\n  templateUrl: './product.component.html',\n  styleUrls: ['./product.component.css']\n})\nexport class ProductComponent implements OnInit {\n\n  productForm: FormGroup;\n  product: Product;\n  editMode = false;\n\n  constructor(private router: Router,\n              private aRoute: ActivatedRoute,\n              public productService: ProductsService) { }\n\n  ngOnInit(): void {\n    let productId = +this.aRoute.snapshot.params['id'];\n    if(productId) {\n      this.editMode = true;\n      this.product = this.productService.getProduct(productId);\n    } else {\n      this.product = { id: 0, name: null, description: null, category: null, author: null, price: 0};\n    }\n\n    this.productForm = new FormGroup({\n      id: new FormControl(this.product.id),\n      name: new FormControl(this.product.name, [Validators.required]),\n      description: new FormControl(this.product.description, [Validators.required]),\n      category: new FormControl(this.product.category, [Validators.required]),\n      author: new FormControl(this.product.author),\n      price: new FormControl(this.product.price)\n    });\n  }\n\n  addOrEditProduct() {\n    if(this.editMode) {\n      this.productService.updateProduct(this.productForm.value);\n    } else {\n      this.productService.addProduct(this.productForm.value);\n    }\n    this.router.navigate([\"/\"], { relativeTo: this.aRoute});\n  }\n\n}\n","    <div class=\"col-xl-12\">\n        <h2> {{ editMode ? 'Update' : 'Add' }} Product </h2>\n        <form [formGroup]=\"productForm\" (ngSubmit)=\"addOrEditProduct()\"  role=\"form\">\n            <div class=\"form-group\">\n                <label for=\"name\">Name</label>&nbsp;\n                <input type=\"text\" class=\"form-control\" name=\"name\" id=\"name\"\n                formControlName=\"name\"\n                required>\n            </div>\n            <div class=\"form-group\">\n                <label for=\"description\">Description</label>&nbsp;\n                <input type=\"text\" class=\"form-control\" name=\"description\" id=\"description\"\n                formControlName=\"description\"\n                required>\n            </div>\n            <div class=\"form-group\">\n                <label for=\"category\">Category</label>&nbsp;\n                <select class=\"form-control\" id=\"category\" name=\"category\" \n                formControlName=\"category\" #category>\n                    <!-- <option value=\"\">Select Category</option> -->\n                    <option *ngFor=\"let category of productService.categories\" [ngValue]=\"category\">{{ category }}</option>\n                </select>\n            </div>\n            <div class=\"form-group\" *ngIf=\"productForm.get('category').value==='Books'\">\n                <label for=\"author\">Author</label>&nbsp;\n                <input type=\"text\" class=\"form-control\" name=\"author\" id=\"author\" \n                formControlName=\"author\">\n            </div>\n            <div class=\"form-group\">\n                <label for=\"price\">Price</label>&nbsp;\n                <input type=\"number\" class=\"form-control\" name=\"price\" id=\"price\" \n                formControlName=\"price\">\n            </div>\n            <div class=\"form-group\">\n                <button type=\"submit\" class=\"btn btn-primary\" >{{ editMode ? 'Update' : 'Add' }}</button>\n            </div>\n        </form>\n    </div>","import { NgModule } from '@angular/core';\r\nimport { Routes, RouterModule } from '@angular/router';\r\n\r\nimport { ProductsComponent } from './products/products.component';\r\nimport { ProductDetailsComponent } from './product-details/product-details.component';\r\nimport { ProductComponent } from './product/product.component';\r\nimport { ProductResolver } from './services/productResolver.service';\r\nimport { AuthGuardService } from '../auth/services/auth-guard.service';\r\n\r\nconst productRoutes: Routes = [\r\n    { path: \"\", component: ProductsComponent },\r\n    {\r\n        path: \"edit-product/new\",\r\n        component: ProductComponent,\r\n        canActivate: [AuthGuardService]\r\n    },\r\n    {\r\n        path: \"edit-product/:id\", \r\n        component: ProductComponent,\r\n        canActivate: [AuthGuardService],\r\n        resolve: { product: ProductResolver }\r\n    },\r\n    {\r\n        path: \":id\",\r\n        component: ProductDetailsComponent,\r\n        resolve: { product: ProductResolver }\r\n    }\r\n];\r\n@NgModule({\r\n    imports: [\r\n        RouterModule.forChild(productRoutes)\r\n    ],\r\n    exports: [RouterModule]\r\n})\r\nexport class ProductsRoutingModule {\r\n\r\n}","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { MatSelectModule } from '@angular/material/select';\n\nimport { ProductsComponent } from './products/products.component';\nimport { ProductsRoutingModule } from './products-routing.module'\nimport { ProductDetailsComponent } from './product-details/product-details.component';\nimport { ProductComponent } from './product/product.component';\nimport { MatCardModule } from '@angular/material/card';\nimport { SharedModule } from '../shared/shared.module';\n\n@NgModule({\n  declarations: [\n    ProductsComponent,\n    ProductDetailsComponent,\n    ProductComponent,\n  ],\n  imports: [\n    CommonModule,\n    ProductsRoutingModule,\n    FormsModule,\n    ReactiveFormsModule,\n    MatCardModule,\n    MatSelectModule,\n    SharedModule\n  ],\n  providers: [  ]\n})\nexport class ProductsModule { }\n","import { Component, OnInit } from '@angular/core';\nimport { Router, ActivatedRoute } from '@angular/router';\n\nimport { ProductsService } from '../services/products.service';\nimport { Product } from '../../shared/models/product';\nimport { CartService } from '../../cart/services/cart.service';\nimport { AuthService } from 'src/app/auth/services/auth.service';\nimport { SnackBarService } from 'src/app/services/snackbar.service';\n\n@Component({\n  selector: 'app-products',\n  templateUrl: './products.component.html',\n  styleUrls: ['./products.component.css']\n})\nexport class ProductsComponent implements OnInit {\n\n  products: Product[] = [];\n  selectedCategory: string;\n  messageTitle = \"No Products found in this category\";\n  messageDescription = \"\";\n  goToMessage = \"Add Product\";\n  goToLink = \"/products/edit-product/new\";\n  \n  constructor(private router: Router,\n              private aRoute: ActivatedRoute,\n              public productsService: ProductsService,\n              private cartService: CartService,\n              public authService: AuthService,\n              private snackBarService: SnackBarService) { }\n\n  ngOnInit(): void {\n    this.selectedCategory = \"All\";\n      this.productsService.getProducts().subscribe(products => {\n        this.products = products;\n    });\n  }\n\n  goToProduct(productId: number) {\n    this.router.navigate(['../products/' + productId], { relativeTo: this.aRoute});\n  }\n\n  addProductToCart(productId: number) {\n    this.cartService.addToCart(productId);\n    this.snackBarService.show(\"Product added to cart\");\n  }\n\n  deleteProduct(productId: number) {\n    this.productsService.deleteProduct(productId);\n    this.snackBarService.show(\"Product deleted successfully\");\n}\n}\n","<div class=\"row\">\n  <div class=\"col-md-3\">\n    <mat-form-field>\n      <h4 for=\"category_select\">Category By:</h4>\n      <mat-select class=\"form-control\" name=\"selectedCategory\" disableRipple id=\"selectedCategory\"\n        [(ngModel)]=\"selectedCategory\">\n        <mat-option value=\"All\" selected>All</mat-option>\n        <mat-option *ngFor=\"let category of productsService.categories\" [value]=\"category\">{{category}}\n        </mat-option>\n      </mat-select>\n    </mat-form-field>\n  </div>\n  <div class=\"col-md-9\">\n    <div class=\"row row-cols-1 row-cols-md-4\" *ngIf=\"!productsService.isLoading; else elseBlock;\">\n      <div class=\"col-md-3\" style=\"padding-bottom: 15px;\"\n        *ngFor=\"let product of (products | searchByCategory:selectedCategory | search:productsService.searchTerm)\"\n        style=\"cursor: pointer\">\n        <mat-card>\n          <img mat-card-image src=\"assets/images/female.png\" width=\"200px\" height=\"200px\"\n            class=\"card-img-top\" alt=\"{{ product.name }}\" \n            (click)=\"goToProduct(product.id)\">\n          <mat-card-content (click)=\"goToProduct(product.id)\">\n            <h5 class=\"card-title\">{{ product.name }}</h5>\n          </mat-card-content>\n          <mat-card-actions>\n            <small class=\"text-muted\">₹ {{ product.price }}</small>&nbsp;&nbsp;\n            <span class=\"right\">\n              <a placement=\"top\" mdbTooltip=\"Quick Look\" container=\"body\" (click)=\"addProductToCart(product.id)\">\n                <i class=\"fa fa-shopping-cart\"></i>\n              </a>\n            </span>&nbsp;&nbsp;\n            <span class=\"right\" *ngIf=\"authService.isLoggedIn\">\n                  <a placement=\"top\" mdbTooltip=\"Delete Product\" container=\"body\"\n                      (click)=\"deleteProduct(product.id)\"><i class=\"fa fa-trash\"></i></a>\n              </span>\n          </mat-card-actions>\n        </mat-card>\n        <!-- <div class=\"card\" style=\"cursor: pointer;\">\n          <img src=\"../../../assets/images/female.png\" \n          class=\"card-img-top\" width=\"200px\" height=\"200px\" alt=\"...\"\n          (click)=\"goToProduct(product.id)\">\n          <div class=\"card-body\" (click)=\"goToProduct(product.id)\">\n            <h5 #title class=\"card-title\">{{ product.name }}</h5>\n            <p class=\"card-text\">{{ product.price }}</p>\n          </div>\n          <div class=\"card-footer\">\n            <span class=\"right\">\n              <a placement=\"top\" mdbTooltip=\"Quick Look\" container=\"body\"\n                  (click)=\"addProductToCart(product.id)\">\n                  <i class=\"fa fa-shopping-cart\"></i>\n              </a>\n          </span>&nbsp;&nbsp;\n          <span class=\"right\">\n            <a href=\"#\" class=\"btn btn-primary\">Buy</a>\n          </span>\n          </div>\n        </div> -->\n      </div>\n\n      <app-no-product-found \n        [title]=\"messageTitle\" \n        [description]=\"messageDescription\" \n        [goToLink]=\"goToLink\"\n        [goToMessage]=\"goToMessage\"\n        *ngIf=\"(products | searchByCategory:selectedCategory | search:productsService.searchTerm).length === 0\">\n      </app-no-product-found>\n    </div>\n    <ng-template #elseBlock>\n      <div class=\"row\" style=\"text-align: center\">\n        <div class=\"text-center\">\n            <div class=\"spinner-border text-primary\" role=\"status\">\n              <span class=\"sr-only\">Loading...</span>\n            </div>\n          </div>\n    </div>\n    </ng-template>\n  </div>\n</div>","import { Injectable } from '@angular/core';\r\nimport { \r\n    RouterStateSnapshot, \r\n    ActivatedRouteSnapshot, \r\n    Resolve } from '@angular/router';\r\n\r\nimport { Product } from 'src/app/shared/models/product';\r\nimport { ProductsService } from './products.service';\r\nimport { map } from 'rxjs/operators';\r\nimport { AUTH_KEY } from 'src/app/shared/constants';\r\nimport { AuthService } from 'src/app/auth/services/auth.service';\r\n\r\n@Injectable({\r\n    providedIn: 'root'\r\n})\r\nexport class ProductResolver implements Resolve<Product[]>{\r\n\r\n    constructor(private productService: ProductsService,\r\n                private authService: AuthService) {}\r\n\r\n    resolve(route: ActivatedRouteSnapshot, state: RouterStateSnapshot): Product[] | import(\"rxjs\").Observable<Product[]> | Promise<Product[]> {\r\n        // removing JWT Token incase we reload the page after login\r\n        if(!this.authService.isLoggedIn) {\r\n            sessionStorage.removeItem(AUTH_KEY);\r\n        }\r\n        if(this.productService.products.length !== 0) {\r\n            return this.productService.products;\r\n        }\r\n        return this.productService.getProducts()\r\n        .pipe(map(data => {\r\n            return data;\r\n        }));\r\n    }\r\n}"]}